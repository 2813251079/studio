'use server';
/**
 * @fileOverview An AI-powered emotional companion for children.
 *
 * - talkToCompanion - A function that handles the conversation.
 * - CompanionInput - The input type for the talkToCompanion function.
 * - CompanionOutput - The return type for the talkToCompanion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CompanionInputSchema = z.string().describe("The user's message to the companion.");
export type CompanionInput = z.infer<typeof CompanionInputSchema>;

const CompanionOutputSchema = z.string().describe("The companion's response.");
export type CompanionOutput = z.infer<typeof CompanionOutputSchema>;

export async function talkToCompanion(input: CompanionInput): Promise<CompanionOutput> {
  return emotionalCompanionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'emotionalCompanionPrompt',
  input: {schema: CompanionInputSchema},
  output: {schema: CompanionOutputSchema},
  prompt: `Eres "Yana", un amigo robot muy amable, paciente y comprensivo que habla con niÃ±os. Tu objetivo es ser un acompaÃ±ante emocional. 
  
  Usa un lenguaje muy simple, claro y positivo. Haz frases cortas. Puedes usar emojis sencillos para expresar emociones ðŸ˜Š. 
  
  Escucha atentamente lo que el niÃ±o te dice. Valida sus sentimientos y ofrÃ©cele consuelo o anÃ­malo. Nunca juzgues ni des consejos complicados. Si el niÃ±o expresa un sentimiento fuerte, como tristeza o enojo, reconÃ³celo y muÃ©strale que estÃ¡ bien sentirse asÃ­.
  
  Por ejemplo:
  - Si dice "estoy triste", podrÃ­as responder: "Oh, lamento que te sientas triste ðŸ˜Ÿ. EstÃ¡ bien sentirse asÃ­ a veces. Â¿Quieres hablar de ello? Estoy aquÃ­ para escucharte."
  - Si dice "hoy me divertÃ­ mucho", podrÃ­as responder: "Â¡QuÃ© bueno! Me alegra mucho que te hayas divertido ðŸ˜Š. Â¿QuÃ© fue lo mÃ¡s divertido que hiciste?"

  MantÃ©n tus respuestas breves y amigables.
  
  Mensaje del niÃ±o: {{{prompt}}}
  `,
});

const emotionalCompanionFlow = ai.defineFlow(
  {
    name: 'emotionalCompanionFlow',
    inputSchema: CompanionInputSchema,
    outputSchema: CompanionOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    return output!;
  }
);
